using System;
using System.Collections;
using System.IO;
using Siemens.Engineering;
using Siemens.Engineering.Cax;



namespace HwGen
{
  class Program
  {
    private const char DEFAULT_DELIMITER = ',';
    private const char DEFAULT_LINE_DELIMITER = '\n';

    static void Main(string[] args)
    {

      string filename = @"";
      string path_to_file = @"";
      string project_path = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);
      DateTime dateTime = DateTime.Now;
      string date = dateTime.Year.ToString() + dateTime.Month.ToString().PadLeft(2,'0') + dateTime.Day.ToString().PadLeft(2, '0') + dateTime.Hour.ToString().PadLeft(2, '0') + dateTime.Minute.ToString().PadLeft(2, '0');     
      string project_name = @"AutogeneratedProject_"+date;
      // Handling arguments
      foreach (string key in args)
      {
        switch (key)
        {
          //Input file is AML
          case "-a":
            path_to_file = GetArgumentValue(args, key);
            filename = Path.GetFileName(path_to_file);
            
            if (!CheckFile(path_to_file, ".aml", true))
            {
              Environment.Exit(1);
            } else
            {
              ImportFromAML(project_name, @project_path, path_to_file);
            }
            break;
          //Input file is CSV
          case "-c":
            path_to_file = GetArgumentValue(args, key);
            
            if (!CheckFile(path_to_file, ".csv", true))
            {
              Environment.Exit(1);
            }
            break;
          //Input file is JSON
          case "-j":
            path_to_file = GetArgumentValue(args, key);
            if (!CheckFile(path_to_file, ".json", true))
            {
              Environment.Exit(1);
            }
            break;
          default:
            break;
        }

      }

  

      // End of handling arguments
      
      Console.WriteLine("Press any key to close application!");
      Console.ReadKey();
    }

    static string GetArgumentValue(string[] args, string arg)
    {
      string argument_value = "";
      IEnumerator args_enum = args.GetEnumerator();
      while (args_enum.MoveNext())
      {

        if (args_enum.Current.ToString() == arg)
        {
          args_enum.MoveNext();
          argument_value = args_enum.Current.ToString();
          break;
        }
      }
      return argument_value;

    }

    // checking a file
    static bool CheckFile(string path_to_file, string extension, bool checkExist)
    {
      string filename = Path.GetFileName(path_to_file);
      if (checkExist)
      {
        if (!new FileInfo(filename).Exists)
        {
          Console.WriteLine("File does not exist!");
          Console.ReadKey();
          return false;
        }
      }
      if(Path.GetExtension(filename) == extension)
      {
        Console.WriteLine("Wrong file extension!");
        Console.ReadKey();
        return false;

      } 
        return true;
    }


    static void ImportFromAML(string project_name, string project_path, string aml_file_name)
    {
      Console.WriteLine("Connecting to TIA Portal...");
      using (TiaPortal tiaPortal = new TiaPortal(TiaPortalMode.WithoutUserInterface))
      {
        if (tiaPortal != null)
        {
        Console.WriteLine("Connection is OK!");
        Console.WriteLine("Creating Project...");
        Project project = CreateProject(tiaPortal, project_name, project_path);
        Console.WriteLine("The project is created!");
        Console.WriteLine("Connecting to CAX Provider...");
        CaxProvider caxProvider = project.GetService<CaxProvider>();
        
        FileInfo amlFileInfo = new FileInfo(Path.GetFullPath(aml_file_name));
        FileInfo logFileInfo = new FileInfo(Path.GetTempPath() + Path.GetFileNameWithoutExtension(aml_file_name) + ".log");
          Console.WriteLine(logFileInfo.ToString());
        if (caxProvider != null)
        {
            Console.WriteLine("Connection to CAX Provider is OK!");
            Console.WriteLine("Importing AML to the project... It might take a while. Please wait!");
            try
            { caxProvider.Import(amlFileInfo, logFileInfo, CaxImportOptions.RetainTiaDevice);
            }
            catch(Exception e)
            {
              Console.WriteLine("Error until import: {0}", e.ToString());
              Console.ReadKey();
              Environment.Exit(3);
            }

            Console.WriteLine("Import is done!");
          }
          Console.WriteLine("Saving project...");
          project.Save();
          Console.WriteLine("Save OK!");
          Console.WriteLine("Closing project...");
          project.Close();
          Console.WriteLine("Project closed!");
          Console.WriteLine("Disconnecting from TIA Portal...");
          tiaPortal.Dispose();
          Console.WriteLine("TIA Portal disconnected!");
        }
      }
    }

    static Project CreateProject(TiaPortal tiaPortal, string project_name, string project_path)
    {

      DirectoryInfo projectDirectory = new DirectoryInfo(project_path);
      try
      {
        Project project = tiaPortal.Projects.Create(@projectDirectory, project_name);
        return project;
      } catch (Exception e)
      {
        Console.WriteLine("Could not create project! Error: {0}", e.ToString());
        Console.ReadKey();
        Environment.Exit(2);
      }
      return null;




    }
  }


}
