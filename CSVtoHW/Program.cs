using System;
using System.Collections;
using System.IO;
using Siemens.Engineering;
using Siemens.Engineering.Cax;



namespace CSVtoHW
{
  class Program
  {
    private const char DEFAULT_DELIMITER = ',';
    private const char DEFAULT_LINE_DELIMITER = '\n';

    static void Main(string[] args)
    {

      string filename = "";
      string path_to_file = "";
      string project_path = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);
      string project_name = "AutogeneratedProject_"+DateTime.Now.ToString();
      // Handling arguments
      foreach (string key in args)
      {
        switch (key)
        {
          //Input file is AML
          case "-a":
            path_to_file = GetArgumentValue(args, key);
            filename = Path.GetFileName(path_to_file);
            if (!FileHasTheExtension(filename, "aml"))
            {
              Console.WriteLine("Wrong file extension!");
              Console.ReadKey();
              Environment.Exit(1);
            }
            break;
          //Input file is CSV
          case "-c":
            path_to_file = GetArgumentValue(args, key);
            filename = Path.GetFileName(path_to_file);
            if (!FileHasTheExtension(filename, "csv"))
            {
              Console.WriteLine("Wrong file extension!");
              Console.ReadKey();
              Environment.Exit(1);
            }
            break;
          //Input file is JSON
          case "-j":
            path_to_file = GetArgumentValue(args, key);
            filename = Path.GetFileName(path_to_file);
            if (!FileHasTheExtension(filename, "json"))
            {
              Console.WriteLine("Wrong file extension!");
              Console.ReadKey();
              Environment.Exit(1);
            }
            break;
          default:
            break;
        }

      }
      // End of handling arguments

      using (TiaPortal tiaPortal = new TiaPortal(TiaPortalMode.WithoutUserInterface))
      {
        Project project = CreateProject(tiaPortal, project_name, project_path);
        CaxProvider caxProvider = project.GetService<CaxProvider>();

        if (tiaPortal != null)
        {
          tiaPortal.Dispose();
        }
      }
    }

    static string GetArgumentValue(string[] args, string arg)
    {
      string argument_value = "";
      IEnumerator args_enum = args.GetEnumerator();
      while (args_enum.MoveNext())
      {

        if (args_enum.Current.ToString() == arg)
        {
          args_enum.MoveNext();
          argument_value = args_enum.Current.ToString();
          break;
        }
      }
      return argument_value;

    }

    // checking a filename extension AML
    static bool FileHasTheExtension(string filename, string extension)
    {
      return Path.GetExtension(filename) == extension;
    }


    private bool ImportFromAML(string aml_file_name)
    {

      return false;
    }

    static Project CreateProject(TiaPortal tiaPortal, string project_name, string project_path)
    {

      DirectoryInfo projectDirectory = new DirectoryInfo(project_path);
      try
      {
        Project project = tiaPortal.Projects.Create(projectDirectory, project_name);
        return project;
      } catch (Exception e)
      {
        Console.WriteLine("Could not create project! Error: {0}", e.ToString());
        Console.ReadKey();
        Environment.Exit(2);
      }
      return null;




    }
  }


}
